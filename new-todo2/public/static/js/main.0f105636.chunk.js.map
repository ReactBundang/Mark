{"version":3,"sources":["Firebase.jsx","List.jsx","App.js","serviceWorker.js","index.js"],"names":["database","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","List","todos","db","firebase","useList","ref","snapshots","loading","error","Fragment","map","v","val","useStyles","makeStyles","root","minWidth","bullet","display","margin","transform","title","fontSize","pos","marginBottom","App","classes","useState","setTodos","newTodo","setNewTodo","length","console","log","useEffect","once","then","res","item","lastIdx","last","set","Card","className","id","CardContent","Typography","variant","component","color","gutterBottom","action","onKeyPress","e","key","preventDefault","undefined","Input","type","onChange","target","value","Button","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"oMAEIA,E,yEACAC,EAAiB,CACjBC,OAAQ,0CACRC,WAAY,gCACZC,YAAa,uCACbC,UAAW,gBACXC,cAAe,4BACfC,kBAAmB,eACnBC,MAAO,6C,QCuBIC,EA7BK,SAAC,GAAY,EAAXC,MAAY,IACxBC,EAAIC,aADmB,EAEOC,YAAQF,EAAGG,IAAI,UAFtB,mBAEtBC,EAFsB,KAEXC,EAFW,KAEFC,EAFE,KAO7B,OACI,oCACA,6BACI,2BACKA,GAAS,0CAAgBA,GACzBD,GAAW,qDAGpB,6BACMA,GAAWD,GACb,kBAAC,IAAMG,SAAP,KACI,8BACCH,EAAUI,KAAI,SAACC,GAAD,OACX,4BAAKA,EAAEC,e,gDCXrBC,EAAYC,YAAW,CAC3BC,KAAM,CACJC,SAAU,KAEZC,OAAQ,CACNC,QAAS,eACTC,OAAQ,QACRC,UAAW,cAEbC,MAAO,CACLC,SAAU,IAEZC,IAAK,CACHC,aAAc,MA6DHC,EAzDJ,WACT,IAAMC,EAAUb,IADD,EAEWc,mBAAS,IAFpB,mBAER1B,EAFQ,KAED2B,EAFC,OAGeD,qBAHf,mBAGRE,EAHQ,KAGCC,EAHD,KFhBR3B,OAAc4B,SACf5B,gBAAuBX,GACvBwC,QAAQC,IAAI,UAEhB1C,EAAUY,aEqDZ,OAVA+B,qBAAU,WAGR,GAFAF,QAAQC,IAAI,aFxCH1C,EAASc,IAAI,YAAY8B,KAAK,SACnCC,MAAK,SAAAC,GACHL,QAAQC,IAAII,EAAIzB,MAAM,GAAG0B,SEwCd,GAAdrC,EAAM8B,OACT,CACE,IAAIQ,EAAStC,EAAMA,EAAM8B,OAAO,GFtCZS,EEuCVD,EFtCDhD,EAASc,IAAI,WAAW8B,KAAK,SAClCC,MAAK,SAAAC,GAGH9C,EAASc,IAAT,UAAuBoC,IAAvB,sBAA+BJ,EAAIzB,OAAnC,CAAyC4B,QAL5B,IAACA,IEyCrB,CAACvC,IAGF,kBAACyC,EAAA,EAAD,CAAMC,UAAWjB,EAAQX,KAAM6B,GAAG,aAChC,kBAACC,EAAA,EAAD,KACA,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAU,MAAnC,YACA,kBAACF,EAAA,EAAD,CAAYH,UAAWjB,EAAQL,MAAO4B,MAAM,gBAAgBC,cAAY,GAAxE,gCAEA,0BAAMC,OAAO,GAAGC,WArCD,SAACC,GACL,UAAVA,EAAEC,MACHD,EAAEE,sBACQC,GAAPvD,GACD2B,EAAS,GAAD,mBAAK3B,GAAL,CAAY4B,QAkCpB,kBAAC4B,EAAA,EAAD,CAAOC,KAAK,OAAOC,SA1CJ,SAACN,GACpBvB,EAAWuB,EAAEO,OAAOC,UA0ChB,kBAACC,EAAA,EAAD,CAAQC,QA1BA,SAACV,GACbA,EAAEE,iBACFvB,QAAQC,IAAIhC,QACFuD,GAAPvD,GACD2B,EAAS,GAAD,mBAAK3B,GAAL,CAAY4B,OAsBlB,QAEF,kBAAC,EAAD,CAAM5B,MAAOA,OCrEC+D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxC,MAAK,SAAAyC,GACJA,EAAaC,gBAEdC,OAAM,SAAAvE,GACLwB,QAAQxB,MAAMA,EAAMwE,c","file":"static/js/main.0f105636.chunk.js","sourcesContent":["import * as firebase from 'firebase'\n\nlet database;\nlet firebaseConfig = {\n    apiKey: \"AIzaSyDNWOwUle6rwAveRW3WgqTHj6z6w7fcR-w\",\n    authDomain: \"porking-cd568.firebaseapp.com\",\n    databaseURL: \"https://porking-cd568.firebaseio.com\",\n    projectId: \"porking-cd568\",\n    storageBucket: \"porking-cd568.appspot.com\",\n    messagingSenderId: \"295289843735\",\n    appId: \"1:295289843735:web:3025fdda3a54c389f92c52\"\n  };\n\n  export const fire= () => {\n    if (!firebase.apps.length) {\n        firebase.initializeApp(firebaseConfig);\n        console.log(\"fire!\");\n    }\n    database= firebase.database();\n  }\n\n  export const getFireDB=()=> {\n      var a= database.ref('/places/').once('value');\n      a.then(res=>{\n          console.log(res.val()[1].item);\n      })\n  }\n\n  export const setFireDB=(last)=>{\n        var a= database.ref('/todos/').once('value');\n        a.then(res=>{\n            //console.log(res.val());\n            //console.log(last);\n            database.ref(`todos/`).set([...res.val(),last]);\n        })\n    }","import React from 'react'\nimport * as firebase from 'firebase'\nimport { useList, useObject, useListVals } from 'react-firebase-hooks/database';\n\nexport const List = ({todos}) => {\n    const db= firebase.database();\n    const [snapshots, loading, error] = useList(db.ref('todos'));\n    //const [value, loading, error] = useObject(firebase.database().ref('todos/1'));\n    //const [value, loading, error] = useListVals<Todo>('todos');\n\n    //const todoList= todos.map(todo => <li>{todo}</li>)\n    return (\n        <>\n        <div>\n            <p>\n                {error && <strong>Error: {error}</strong>}\n                {loading && <span>Value: Loading...</span>}\n            </p>\n        </div>\n        <ul>\n            {!loading && snapshots && (\n            <React.Fragment>\n                <span>\n                {snapshots.map((v) => (\n                    <li>{v.val()}</li>\n                ))}\n                </span>\n            </React.Fragment>\n            )}\n        </ul>\n        </>\n    )\n}\nexport default List;\n","import React, {useState, useEffect} from 'react';\n\nimport './App.css';\nimport {fire,getFireDB,setFireDB} from './Firebase'\nimport List from './List.jsx'\n\nimport { Button,Input } from '@material-ui/core';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles({\n  root: {\n    minWidth: 275,\n  },\n  bullet: {\n    display: 'inline-block',\n    margin: '0 2px',\n    transform: 'scale(0.8)',\n  },\n  title: {\n    fontSize: 14,\n  },\n  pos: {\n    marginBottom: 12,\n  },\n});\n\nconst App= () => {\n  const classes = useStyles();\n  const [todos, setTodos] = useState([]);\n  const [newTodo, setNewTodo] = useState(); //입력값 저장용.\n\n  // input 키입력 onChange 이벤트\n  const InputChanged = (e) => {\n    setNewTodo(e.target.value);\n  }\n\n  const KeyPressed = (e) => {\n    if(e.key === 'Enter') {\n      e.preventDefault();\n      if(todos!=undefined)\n        setTodos([...todos, newTodo]);\n    }\n    \n  }\n\n  // firebase library 초기화\n  fire();\n\n  // 버튼 onClick event\n  const addTodo=(e) => {\n    e.preventDefault();\n    console.log(todos);\n    if(todos!=undefined)\n      setTodos([...todos, newTodo]);\n  }\n\n  // 원하는 state 변경시 useEffect 호출되도록 설정 가능.\n  useEffect(() => {\n    console.log(\"useEffect\");\n    getFireDB();\n    if(todos.length!=0)\n    {\n      var lastIdx= todos[todos.length-1];\n      setFireDB(lastIdx);\n    }\n  }, [todos]);\n\n  return (\n    <Card className={classes.root} id=\"card_main\">\n      <CardContent>\n      <Typography variant=\"h5\" component=\"h2\">Todo App</Typography>\n      <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n      With react hooks + firebase!</Typography>\n      <form action=\"\" onKeyPress={KeyPressed}>\n        <Input type=\"text\" onChange={InputChanged}/>\n        <Button onClick={addTodo}>Add</Button>\n      </form>\n      <List todos={todos}/>\n      </CardContent>\n    </Card>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}